---
layout:     post
title:      "Perl子程序"
subtitle:   " \"Perl子程序\""
date:       2019-11-18 12:40:00
author:     "jingwen"
catalog: true
tags:
    - Perl
    - programming
---

## Perl子程序
Perl也可以让你创建子程序(subroutine)，也就是用户定义的函数，它可以让程序员重复利用已有的代码，也能让代码更加美观和可读性。子程序的名称也属于Perl标识符的范畴(即由字母，数字和下划线组成，但不能以数字开头)，有时候视情况会以"&"开头。

### 子程序定义
定义子程序需要用关键字sub，子程序名，以及用花括号封闭起来的代码块，这部分代码是子程序的主体。例如
```Perl
    sub marine{
        $n += 1 ;
        print "Hello,sailor number $n|\n";
    }
```
子程序可以被定义在程序中的任何位置，有C语言程序背景的程序员喜欢把子程序定义在文件的开头。子程序的定义是全局的，假如你定义了两个重名的子程序，那么后面的子程序会覆盖掉前面的那个。

### 调用子程序
你可以在任意表达式中使用子程序名，前面加上&来调用它。
```Perl
    &marine
```
### 返回值
往往我们调用子程序的时候，都是希望能获得子程序返回的结果，来做进一步处理，在Perl中所有的子程序都有返回值。

```Perl
    #!/usr/bin/perl
    use strict;
    use  warnings;
    my $fred = 3;
    my $barney = 4;
    sub sum_of_fred_and_barney{
        print "Hey,you";
        $fred + $barney;
    }
    my $wilia = &sum_of_fred_and_barney;
    print "length = $wilia\n";
```
### 参数
Perl子程序可以有参数(argument)。要传递参数列表到子程序里，只要在子程序调用的后面加上被括号圈引的列表表达式就行了。
```Perl
    $n = &max(10,15)
```
会调用子程序名为max的子程序，并且将参数10，15会被传入子程序，让子程序随意用。该子程序的第一个参数存储于\$_[0],第二个参数存储于\$_[1],依次类推

### 私有变量
默认的情况下，Perl里面所有的变量都是全局变量，也就是说，在程序里的任何地方都可以访问它们，但是你可以随时借助my操作符来创建私有变量。
```Perl
    
```



通常情况下，在代码的语句块内容，是按照代码的顺序执行，也就是函数中的第一个语句先执行，接着是第二个语句，依次类推。编程语言提供了更为复杂的执行路径的多种控制语句，循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图
!["循环语句流程"](https://jingwen-blog.oss-cn-beijing.aliyuncs.com/loop.png)
**注意，数字 0, 字符串 '0' 、 "" , 空 list () , 和 undef 为 false ，其他值均为 true。 true 前面使用 ! 或 not则返回 false 。**

### while循环
while语句在给定条件为true时，重复执行语句或语句组。循环主题执行之前会测试条件。
语法格式如下
```Perl
while(condition)
{
   statement(s);
}
```
在这里，statement(s)可以是一个单独的语句，也可以是几个语句组成的语句块，或者函数。condition可以是任意的表达式，当为任意非零值时都为true，条件为true时，执行循环体。

### until循环
until 语句在给定条件为 false 时，重复执行语句或语句组。
语法格式如下
```Perl
until(condition)
{
   statement(s);
}
```
这个就刚好跟while循环相反了，不知道这个设计真正的作用是什么

### for循环
Perl的for循环用于多次执行一个语句系列，让代码更简洁
语法格式如下
```Perl
    for(init;condition;increment){
        statements(s);
    }
```
for的流程图为
!["for的流程图"](https://jingwen-blog.oss-cn-beijing.aliyuncs.com/forloop.png)

for的流程控制语句解析
* init首先会被执行，且只会出现一次。这一语句允许您声明并且初始化任何循环控制变量，当然这里也可以不需要任何语句，只是一个分号(;)即可
* condition，接下来会判断condition的条件，如果为true，会继续执行循环主体。如果为false，那么就会执行for循环的下一条语句也就是increment语句
* 一旦condition的条件为true时，就会执行循环体statements(s)，执行结束之后，才会执行increment语句

```Perl
    #!/usr/bin/perl
    for( $a = 0; $a < 10; $a = $a + 1 ){
        print "a 的值为: $a\n";
    }
```

### foreach循环
用于迭代一个列表或集合或数组变量的值
语法格式为

```Perl
    foreach var (list) {
        ...
    }
```
实例为
```Perl
    #!/usr/bin/perl
    @list = (2, 12, 36, 42, 51);
    # 执行foreach 循环
    foreach $a (@list){
        print "a 的值为: $a\n";
    }
```
### do while循环
不像 for 和 while 循环，它们是在循环头部测试循环条件。在 Perl 语言中，do...while 循环是在循环的尾部检查它的条件。

do...while 循环与 while 循环类似，但是 do...while 循环会确保至少执行一次循环。

语法格式为
```Perl
    do
    {
       statement(s);
    }while( condition );
```
***条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。**

代码案例
```Perl
    #!/usr/bin/perl
    $a = 10;
    # 执行 do...while 循环
    do{
       printf "a 的值为: $a\n";
       $a = $a + 1;
    }while( $a < 15 );
```

## Perl控制语句
循环控制语句改变了代码的执行顺序，通过控制语句你可以实现代码的跳转

### next语句
Perl next 语句用于停止执行从next语句的下一语句开始到循环体结束标识符之间的语句，转去执行continue语句块，然后再返回到循环体的起始处开始执行下一次循环。 

语法为
```Perl
    next [ LABEL ]; ##其中 LABEL 是可选的，如果没有指定 LABEL，next 语句将返回到循环体的起始处开始执行下一次循环。
```
### last语句
Perl last 语句用于退出循环语句块，从而结束循环，last语句之后的语句不再执行，continue语句块也不再执行。

语法为
```Perl
    last [ LABEL ]; ##其中 LABEL 是可选的
```

### continue语句
Perl continue 块通常在条件语句再次判断前执行。continue 语句可用在 while 和 foreach 循环中。

while 循环中 continue 语句语法格式如下所示：

```Perl
    while(condition){
        statement(s);
    }continue{
        statement(s);
    }
```

foreach 循环中 continue 语句语法格式如下所示：

```Perl
    foreach $a (@listA){
        statement(s);
    }continue{
        statement(s);
    }
```

### redo语句
Perl redo 语句直接转到循环体的第一行开始重复执行本次循环，redo语句之后的语句不再执行，continue语句块也不再执行。continue 语句可用在 while 和 foreach 循环中。

!["redo"](https://jingwen-blog.oss-cn-beijing.aliyuncs.com/redo.jpg)



